services:
  # Django Backend
  backend:
    build: .
    container_name: shk_cms_backend
    volumes:
      - .:/app
      - media_files:/app/media
      - static_files:/app/staticfiles
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
    depends_on:
      - postgres
      - redis
    networks:
      - shk_cms_network
    restart: unless-stopped

  postgres:
    image: postgres:15
    container_name: shk_cms_postgres
    environment:
      POSTGRES_DB: CMS
      POSTGRES_USER: Sascha
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - shk_cms_network
    # Zusätzliche PostgreSQL Konfiguration für bessere Performance
    command: >
      postgres -c shared_preload_libraries=pg_stat_statements
               -c pg_stat_statements.max=10000
               -c pg_stat_statements.track=all
               -c max_connections=100
               -c shared_buffers=256MB
               -c effective_cache_size=1GB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.9
               -c wal_buffers=16MB
               -c default_statistics_target=100

  # Optional: pgAdmin für Datenbank-Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: shk_cms_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - "8080:80"
    depends_on:
      - postgres
    networks:
      - shk_cms_network
    restart: unless-stopped
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  # Optional: Redis für Caching und Celery (später)
  redis:
    image: redis:7-alpine
    container_name: shk_cms_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - shk_cms_network
    restart: unless-stopped
    command: redis-server --appendonly yes

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  redis_data:
    driver: local
  media_files:
    driver: local
  static_files:
    driver: local

networks:
  shk_cms_network:
    driver: bridge